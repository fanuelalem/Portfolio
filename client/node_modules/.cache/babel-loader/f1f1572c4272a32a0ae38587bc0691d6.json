{"ast":null,"code":"import { GET_ALL_STOCKS, GET_ALL_STOCKS_ERROR, GET_USER_STOCKS, GET_USER_STOCKS_ERROR, UPDATE_STOCK_BY_ID_ERROR, DELETE_STOCK_BY_ID_ERROR } from '../types';\nimport axios from 'axios';\nexport const getAllStocks = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get('/api/stock');\n    dispatch({\n      type: GET_ALL_STOCKS,\n      payload: data\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_ALL_STOCKS_ERROR,\n      payload: 'Something went wrong, please refresh the page to try again'\n    });\n  }\n};\nexport const getUserStocks = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/stock', {\n      headers: {\n        authorization: localStorage.getItem('token')\n      }\n    });\n    dispatch({\n      type: GET_USER_STOCKS,\n      payload: data.reverse()\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_USER_STOCKS_ERROR,\n      serverError: e,\n      userError: 'Please refresh the page and try again'\n    });\n  }\n};\nexport const updateStocksCompletedById = (id, completed, text) => async dispatch => {\n  try {\n    await axios.put(`/api/user/stock/${id}`, {\n      text,\n      completed: !completed\n    }, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      }\n    });\n    const {\n      data\n    } = await axios.get('/api/user/stock', {\n      headers: {\n        authorization: localStorage.getItem('token')\n      }\n    });\n    dispatch({\n      type: GET_USER_STOCKS,\n      payload: data.reverse()\n    });\n  } catch (e) {\n    dispatch({\n      type: UPDATE_STOCK_BY_ID_ERROR,\n      payload: e\n    });\n  }\n};\nexport const deleteStockById = id => async dispatch => {\n  try {\n    await axios.delete(`/api/user/stock/${id}`, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      }\n    });\n    const {\n      data\n    } = await axios.get('/api/user/stock', {\n      headers: {\n        authorization: localStorage.getItem('token')\n      }\n    });\n    dispatch({\n      type: GET_USER_STOCKS,\n      payload: data.reverse()\n    });\n  } catch (e) {\n    dispatch({\n      type: DELETE_STOCK_BY_ID_ERROR,\n      payload: e\n    });\n  }\n};","map":{"version":3,"sources":["/Users/fanuelalem/Portfolio/client/src/actions/stocks/index.js"],"names":["GET_ALL_STOCKS","GET_ALL_STOCKS_ERROR","GET_USER_STOCKS","GET_USER_STOCKS_ERROR","UPDATE_STOCK_BY_ID_ERROR","DELETE_STOCK_BY_ID_ERROR","axios","getAllStocks","dispatch","data","get","type","payload","e","getUserStocks","headers","authorization","localStorage","getItem","reverse","serverError","userError","updateStocksCompletedById","id","completed","text","put","deleteStockById","delete"],"mappings":"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","sourcesContent":["import {\n  GET_ALL_STOCKS,\n  GET_ALL_STOCKS_ERROR,\n  GET_USER_STOCKS,\n  GET_USER_STOCKS_ERROR,\n  UPDATE_STOCK_BY_ID_ERROR,\n  DELETE_STOCK_BY_ID_ERROR,\n} from '../types';\n\nimport axios from 'axios';\n\nexport const getAllStocks = () => async dispatch => {\n  try {\n    const { data } = await axios.get('/api/stock');\n    dispatch({ type: GET_ALL_STOCKS, payload: data });\n  } catch (e) {\n    dispatch({\n      type: GET_ALL_STOCKS_ERROR,\n      payload: 'Something went wrong, please refresh the page to try again',\n    });\n  }\n};\n\nexport const getUserStocks = () => async dispatch => {\n  try {\n    const { data } = await axios.get('/api/user/stock', {\n      headers: { authorization: localStorage.getItem('token') },\n    });\n    dispatch({ type: GET_USER_STOCKS, payload: data.reverse() });\n  } catch (e) {\n    dispatch({\n      type: GET_USER_STOCKS_ERROR,\n      serverError: e,\n      userError: 'Please refresh the page and try again',\n    });\n  }\n};\n\nexport const updateStocksCompletedById =\n  (id, completed, text) => async dispatch => {\n    try {\n      await axios.put(\n        `/api/user/stock/${id}`,\n        { text, completed: !completed },\n        { headers: { authorization: localStorage.getItem('token') } }\n      );\n      const { data } = await axios.get('/api/user/stock', {\n        headers: { authorization: localStorage.getItem('token') },\n      });\n      dispatch({ type: GET_USER_STOCKS, payload: data.reverse() });\n    } catch (e) {\n      dispatch({ type: UPDATE_STOCK_BY_ID_ERROR, payload: e });\n    }\n  };\n\nexport const deleteStockById = id => async dispatch => {\n  try {\n    await axios.delete(`/api/user/stock/${id}`, {\n      headers: { authorization: localStorage.getItem('token') },\n    });\n    const { data } = await axios.get('/api/user/stock', {\n      headers: { authorization: localStorage.getItem('token') },\n    });\n    dispatch({ type: GET_USER_STOCKS, payload: data.reverse() });\n  } catch (e) {\n    dispatch({ type: DELETE_STOCK_BY_ID_ERROR, payload: e });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}